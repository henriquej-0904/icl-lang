PARSER_BEGIN(Parser)

import java.util.*;
import util.*;

import ast.*;
import ast.number.*;
import ast.bool.*;

/** ID lister. */
public class Parser {}

PARSER_END(Parser)

SKIP :
{
  " "
| "\t"
| "\r\n"
| "\n"
}

TOKEN :
{ 
  < EXIT: "exit" >
  |
  < DEF: "def" >
  |
  < IN: "in" >
  |
  < END: "end" >
  |
  < UP : "up" >
  |
  < Id: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"] )* >
  |
  < Num: (["0"-"9"]) + >
  |
  < PLUS : "+" >
  |
  < MINUS : "-">
  |
  < MUL : "*">
  |
  < DIV : "/">
  |
  < LPAR : "(" >
  |
  < RPAR : ")" >
  |
  < EQUALS : "=" >
  |
  < EL: ";" >
}

ASTNode Start() :
{
ASTNode t1;
}
{
   t1 = Exp() <EL>
	{ return t1; }
}

ASTNode Exp() :
{
ASTNode t1,t2;
Token tok;
}
{
    (t1 = Term() ( ( tok=<PLUS> | tok=<MINUS> ) t2=Term() 

                 {
                   NumberArithmeticBinaryOperator operator;
                   if (tok.kind == PLUS)
                      operator = NumberArithmeticBinaryOperator.ADD;
                   else 
                      operator = NumberArithmeticBinaryOperator.SUB;

                    t1 = new ASTNumberArithmeticBinaryOperation(t1, t2, operator);
                 }

                 )*
    )
     { return t1; }
}

ASTNode Term() :
{
ASTNode t1,t2;
Token tok;
}
{
     t1=Fact() ( ( tok=<MUL> | tok=<DIV> ) t2=Fact()

                {
                  NumberArithmeticBinaryOperator operator;
                  if (tok.kind == MUL)
                      operator = NumberArithmeticBinaryOperator.MUL;
                  else
                      operator = NumberArithmeticBinaryOperator.DIV;

                  t1 = new ASTNumberArithmeticBinaryOperation(t1, t2, operator);
                }
     ) *

     { return t1; }  
	
}

ASTNode Fact() :
{ASTNode t1 = null;
ASTNode t2;
List<Bind> init = new LinkedList<Bind>();
Token tok;
int upDepth = 0;
}
{
   ( tok=<Num> { t1 = new ASTNum(Integer.parseInt(tok.image)); } |
      <MINUS> t1=Fact() {t1 = new ASTUminus(t1);} | 
     <LPAR> t1=Exp() <RPAR> |
     tok=<Id>  {t1 = new ASTId(tok.image);} |
     <EXIT> {System.exit(0);} |
     <DEF> ((tok = <Id>) <EQUALS> t2=Exp()
              {
                init.add(new Bind(tok.image,t2));
              }
           )+ (<IN> t1 = Exp() <END> 
              {
                t1 = new ASTDef(init, t1);
              }
           )                |
    
    (
      (<UP>
        {
          upDepth++;
        })+ (tok = <Id>
              {
                t1 = new ASTUp(tok.image, upDepth);
              })
    )

   )
  { return t1;}  
}